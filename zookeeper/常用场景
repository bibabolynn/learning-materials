数据发布/订阅
   推拉结合：客户端向服务端注册自己需要关注的节点，一旦该节点的数据发生变更，那么服务端会向相应的客户端发送Watcher事件通知，客户端接收到这个消息通知之后，需要主动到服务端获取最新的数据

应用启动的时候主动到服务端获取配置信息，并在指定节点上注册一个Watcher监听

负载均衡
Dynamic DNS 
  Register集群负责域名的动态注册 针对服务提供者
  Dispatcher集群负责域名解析 针对服务消费者
  Scanner集群负责检测以及维护服务状态，服务者主动定时向Scanner汇报状态 5s
  SDK提供服务注册和查询接口
  Monitor负责收集服务信息以及对DDNS自身状态的监控
  Controller 负责授权管理、流量监控、静态配置服务和手动屏蔽服务等，运维人员可以在上面管理Register、Dispatcher和Scanner等集群

Name Service
RPC
服务地址列表，通过命名服务，客户端能够根据指定名字获取资源的实体、服务地址、提供者的信息等。
名字要是全局唯一的，调用节点创建接口可以创建一个顺序节点，并得到这个节点的完整名字。顺序节点会后缀一个序列号。

分布式协同/通知服务
数据库复制
热备份：复制任务由一组主机执行，每一个主机要在一个固定的节点下注册自己的主机名（创建一个临时的顺序节点），
注册完后，每台主机都可以获取到自己创建的节点的完成节点名以及所有子节点的列表，采用“小序号优先”策略，判断自己是否是所有子节点序号最小的，
是，就将运行状态设置为RUNNING，其余的主机为STANDBY，RUNNING的主机执行复制任务，一但挂了，其余主机会接到通知，再次找到所有子节点序号最小的，执行任务。
执行之前要到zookeeper上获取Binlog日志的消费位点，这是RUNNING主机定时保存在zookeeper上的
冷备份：和热备份的区别在于Task被分组,主机也被分组，任务主机主机来这个Task底下注册的时候，还是顺序小的主机为RUNNING，
但是其他的不会STANDBY了，会删除自己创建的子节点然后遍历组里的下一个TASK，这样的过程叫“冷备份扫描”，实时性降低，但是节省机器资源

集群管理
动态扩容、缩容、上线、下线
分布式日志收集
收集器机器在一个节点下注册（创建自己的子节点，要用持久节点，因为节点下还会存分配到的日志源机器信息，临时节点的话如果收集器挂了，这些信息就会丢失），
将日志源机器分组，每一组对应一个收集器机器
每个收集器节点下还要保存日志手机状态（日志系统会根据更新时间判断机器是否存活）和CPU负载（日志系统在收集器机器变动时进行局部动态分配时候会用到）
局部动态分配
当有收集器机器挂了，日志系统会把该机器上的任务分配给负载低的收集器机器，
当有新的收集器机器加入，日志系统会把负载高的机器上的部分任务分配给它。
日志系统的监听采用主动轮询的策略，会有一定延迟，放弃监听器，因为实际生产中更新自己状态节点的频率会很高，收集器多的话消息量会非常大，正常工作的情况下状态变更是没有用的。

分布式锁
排他锁
获取排他锁：创建临时子节点，一个节点是一个锁，zookeeper保证只有一个客户端能够创建成功，即为获取锁。没有获取到锁的就进行监听，实时获得锁状态，重新获取锁。
释放排他锁：客户端挂了，那么临时节点会被移除；正常逻辑执行完，客户端主动将临时节点删除。
共享锁
获取共享锁：创建临时顺序子节点，如果是读请求，用R标志，如果是写请求用W标志
判断读写顺序：子节点获取所有已经创建的子节点列表；确定自己的节点序号在所有子节点中的顺序；
对于读请求，如果自己是序号最小的子节点，或者所有比自己序号小的子节点都是读请求，相当于获取到共享锁；如果比自己序号小的子节点中有写请求，那么就要等待。
对于写请求：如果自己不是序号最小的子节点就要进入等待。
如果获取锁失败，调用exist()来找到“比自己小的那个节点”(读请求，比自己序号小的最后一个写请求节点；写请求，比自己序号小的最后一个节点)，注册Watcher
（如果对所有节点进行监听，当同一时间有多个节点对应的客户端完成事务或是事务中断引起节点消失，zookeeper就会在短时间内向其余客户端发送大量的事件通知，会引发羊群效应）
释放共享锁：和释放排他锁一致

分布式队列
FIFO：类似于一个全写的共享锁模型
Barrier:分布式屏障，要等队列元素聚集后才统一执行


